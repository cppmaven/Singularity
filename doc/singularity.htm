
<html><head><meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">

<title>Boost.singularity (Proposed)</title>
<link rel="stylesheet" href="./boostbook.css" type="text/css">
</head>

<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">

<div class="titlepage"><div>

<div><h2 class="title">
<a name="singularity"></a>Boost.singularity (Proposed)
</h2></div>

<div><div class="author"><h5 class="author">
<span class="firstname">Ben</span> <span class="surname">Robinson</span>, <span class="degree">Ph.D.</span>
</h5></div></div>

<div><p class="copyright">Copyright © 2011 Ben Robinson, Ph.D.</p></div>

<div><div class="legalnotice">
<a name="id1268168"></a><p>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <a href="http://www.boost.org/LICENSE_1_0.txt" target="_blank">http://www.boost.org/LICENSE_1_0.txt</a>)
      </p>
</div></div>
</div></div>
<div class="toc">
<p><b>Table of Contents</b></p>
<dl>
<dt><span class="section"><a href="#singularity.motivation">Motivation</a></span></dt>
<dt><span class="section"><a href="#singularity.advantages">Advantages</a></span></dt>
<dd><dl>
<dt><span class="section"><a href="#singularity.scope">Scope</a></span></dt>
<dt><span class="section"><a href="#singularity.lifetime">Lifetime</a></span></dt>
<dt><span class="section"><a href="#singularity.unittesting">Unit Testing</a></span></dt>
<dt><span class="section"><a href="#singularity.initialization">Initialization</a></span></dt>
</dl></dd>
<dt><span class="section"><a href="#singularity.tutorial">Tutorial</a></span></dt>
<dd><dl>
<dt><span class="section"><a href="#singularity.factory">Usage as a Factory</a></span></dt>
<dt><span class="section"><a href="#singularity.baseclass">Usage as a Base Class</a></span></dt>
<dt><span class="section"><a href="#singularity.globalaccess">Enabling Global Access</a></span></dt>
<dt><span class="section"><a href="#singularity.threadsafety">Enabling Thread Safety</a></span></dt>
</dl></dd>
<dt><span class="section"><a href="#singularity.limitations">Limitations</a></span></dt>
<dt><span class="section"><a href="#singularity.customization">Customization</a></span></dt>
<dd><dl>
<dt><span class="section"><a href="#singularity.threadingpolicy">Threading Policy</a></span></dt>
</dl></dd>
<dt><span class="section"><a href="#singularity.references">References</a></span></dt>
</dl>
</div>

<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.motivation"></a><a class="link" href="#singularity.motivation" title="Motivation">Motivation</a>
</h2></div></div></div>
<p>
The singularity design pattern allows you to restrict any class to a single instance, which is an important technique.  While the popular singleton design pattern accomplishes this as well, singleton introduces a number of undesirable constraints and complexities, in the areas of scope, lifetime, unit testing and initialization.  Singularity is an improved alternative to singleton, which restricts any class to a single instance, without the difficulties of singleton.
</p>

<p>
Some of the challenges of using the well known singleton design pattern are described in the article titled "<a class="link" href="http://blogs.msdn.com/b/scottdensmore/archive/2004/05/25/140827.aspx">Why Singletons are Evil</a>", by Scott Densmore.  While Singleton does have perfectly legitimate uses, singularity does neatly solve each of the described weakness.
</p>

</div>

<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.advantages"></a><a class="link" href="#singularity.advantages" title="Advantages">Advantages</a>
</h2></div></div></div>

<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.scope"></a><a class="link" href="#singularity.scope" title="Scope">Scope</a>
</h5></div></div></div>

<p>
A singularity can be created as either a local object, or a globally accessible object.  If you need a locally accessible object, then call create().  If you need a globally accessible object, then instead call create_global().  In this way, the decision on the scope and accessibility of the object is decided independent of the decision to make the object singular.  For singularity, object accessibility is orthogonal to restrictions on the number of instances, as it should be.
</p>
<p>
Singletons are always globally accessible.  This effectively makes them a global, and makes it impossible to prevent access to that object from anywhere in the code.  This prevents encapsulation and tightly couples a singleton to all classes and functions which access it.
</p>

<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.lifetime"></a><a class="link" href="#singularity.lifetime" title="Lifetime">Lifetime</a>
</h5></div></div></div>

<p>
The lifetime of the singularity object is bounded by calls to create() and destroy().  The lifetime of many objects are bounded by calls to new() and delete(), and managing the lifetime of these objects is well understood.  The lifetime of singularity is managed explicitly, and is under the direct control of the developer.  This makes lifetime management straightforward, and reduces the number of hidden subleties that a developer needs to be aware of when using the pattern.
</p>
<p>
Singleton introduces numerous subtle lifetime management complexities.  This is partly due to the feature of lazy initialization, as well as the undefined destruction order of multiple singletons.  An excellent discussion of these complexities, is given in <a href="http://en.wikipedia.org/wiki/Modern_C%2B%2B_Design" target="_blank">Modern C++ Design</a>, chapter 6, by Andrei Alexandrescu.  Developers can use singularity reliably, without requiring intimate knowledge of various compiler techniques to make initialization of static variables thread safe, for example.
</p>

<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.unittesting"></a><a class="link" href="#singularity.unittesting" title="Unit Testing">Unit Testing</a>
</h5></div></div></div>

<p>
Singularities can be created before each unit test and explicity destroyed afterwords.  Therefore each unit test runs completely independent from the state of the other tests.  They can be passed into testable objects as dependencies, making the testable object context independent.  This context can be replaced with a mock object, and passed in as the dependency, since the object under test is not coupled directly to an object of a specific type.
</p>
<p>
Singletons are created on first access, and exist for the duration of program execution.  Therefore state information is maintained across separate unit tests, which creates an undesirable coupling between independent unit tests, as well as an order dependence.  Another difficulty of testing with singletons is that the unit tested objects access the singleton directly, since they are globally accessible objects.  Testable objects should be context independent, but if an object is tightly coupled to a singleton, it is difficult to replace this dependency with an object of another type.<br>
</p>

<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.initialization"></a><a class="link" href="#singularity.initialization" title="Initialization">Initialization</a>
</h5></div></div></div>

<p>
Singularities of objects can be created using any available constructor for that object.  Singularity can be used as either a factory, or a base class.  In either case, all the available constructors for the class can be used to create the single instance.
</p>
<p>
Singletons typically restricts a class to its default constructor.  Any pattern whose purpose is to enforce a single instance, should not necessarily place restrictions on the number, or type of constructors which can be used to instantiate that instance.<br>
</p>

</div>

<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.tutorial"></a><a class="link" href="#singularity.tutorial" title="Tutorial">Tutorial</a>
</h2></div></div></div>

<p>
To use singularity, either as a factory or a base class, the class which is to be singular must make all constructors private, and friend the singularity class.  A macro is provided to simplify the friend statement when used as a factory:
</p>
<pre class="programlisting">
<span class="preprocessor">#define</span> FRIEND_CLASS_SINGULARITY \
    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> M&gt; <span class="keyword">friend</span> <span class="keyword">class</span> singularity
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.factory"></a><a class="link" href="#singularity.factory" title="Usage as a Factory">Usage as a Factory</a>
</h5></div></div></div>

<p>
Usage as a factory is shown as follows:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="comment">// This is the class which will be singularized.</span>
<span class="comment">// Notice the private constructors and friend statement.</span>
<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & firstHorizon = singularity&lt;Horizon&gt;::create();
    <span class="comment">// Use the firstHorizon here...</span>
    singularity&lt;Horizon&gt;::destroy();
	
    <span class="comment">// Create using a non-default constructor.</span>
    Horizon & secondHorizon = singularity&lt;Horizon&gt;::create(7);
    <span class="comment">// Use the secondHorizon here...</span>
    singularity&lt;Horizon&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.baseclass"></a><a class="link" href="#singularity.baseclass" title="Usage as a Base Class">Usage as a Base Class</a>
</h5></div></div></div>

<p>
Usage as a base class is shown as follows:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="comment">// This is the class which will be singularized.</span>
<span class="comment">// Notice the private constructors and friend statement.</span>
<span class="comment">// Also notice the curiously recurring template pattern.</span>
<span class="keyword">class</span> Horizon : <span class="keyword">public</span> singularity&lt;Horizon&gt;
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    friend class singularity&lt;Horizon&gt;;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & firstHorizon = Horizon::create();
    <span class="comment">// Use the firstHorizon here...</span>
    Horizon::destroy();
	
    <span class="comment">// Create using a non-default constructor.</span>
    Horizon & secondHorizon = Horizon::create(7);
    <span class="comment">// Use the secondHorizon here...</span>
    Horizon::destroy();

    <span class="keyword">return</span> 0;
}
</pre></div>


<div class="section">
<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.globalaccess"></a><a class="link" href="#singularity.globalaccess" title="Enabling Global Access">Enabling Global Access</a>
</h5></div></div></div>

<p>
To enable global access to the instance through the get_global() member function, use create_global() instead of create() when instantiating the object.  An example is shown:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & horizon = singularity&lt;Horizon&gt;::create_global();
    {
        <span class="comment">// Someplace far away in the code.</span>
        Horizon & sameHorizon = singularity&lt;Horizon&gt;::get_global();
        <span class="comment">// Use the sameHorizon here...</span>
    }
    singularity&lt;Horizon&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.threadsafety"></a><a class="link" href="#singularity.threadsafety" title="Enabling Thread Safety">Enabling Thread Safety</a>
</h5></div></div></div>

<p>
To enable thread safety, supply a second template argument to singularity as "multi_threaded".  An example is shown below:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;
<span class="keyword">using</span> ::boost::multi_threaded;

<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & horizon = singularity&lt;Horizon, multi_threaded&gt;::create_global();
    {
        <span class="comment">// Someplace far away in the code.</span>
        Horizon & sameHorizon = singularity&lt;Horizon, multi_threaded&gt;::get_global();
        <span class="comment">// Use the sameHorizon here...</span>
    }
    singularity&lt;Horizon, multi_threaded&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
<p>
To use a thread safe singularity as a base class, inherit from singularity as shown below:
</p>
<pre class="programlisting">
<span class="keyword">class</span> Horizon : <span class="keyword">public</span> singularity&lt;Horizon, multi_threaded&gt;
</pre>
<p>
Because the Double-Checked Locking Pattern is not both thread-safe and portable (see Reference 3), the multi_threaded policy mutex is always acquired when calling on any member function of singularity.  When using the singularity with create_global(), due to the performance impact of acquiring a mutex, it is recommended that get_global() be called infrequently, and the returned reference stored for later use.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.limitations"></a><a class="link" href="#singularity.limitations" title="Limitations">Limitations</a>
</h2></div></div></div>

<p>
As a generic wrapper class, singularity needs to perfectly forward the arguments passed from the create() function, into the singularized class.  Unfortunately with C++03, this is not possible for an arbitrary number of arguments, without an O(2^n) implementation.  This is known as the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm">forwarding problem</a>.
</p>

<p>
Just like to Boost.Bind, most create() functions must receive their arguments as non-const references.  However, for functions requiring up to 3 arguments, all arguments will be perfectly forwarded.  The number of required create() functions is O(2^n), 2*(2^(n+1)-1) to be exact, so the default upper limit of 3 arguments requires generating 30 functions.  Constructors which take additional arguments receive them as non-const references up to 10 arguments by default.
</p>
<pre class="programlisting">
<span class="preprocessor">#ifndef</span> BOOST_SINGULARITY_PERFECT_FORWARD_ARG_SIZE
<span class="preprocessor">#define</span> BOOST_SINGULARITY_PERFECT_FORWARD_ARG_SIZE 3
<span class="preprocessor">#endif</span>

<span class="preprocessor">#ifndef</span> BOOST_SINGULARITY_NONCONST_REFERENCE_ARG_SIZE
<span class="preprocessor">#define</span> BOOST_SINGULARITY_NONCONST_REFERENCE_ARG_SIZE 10
<span class="preprocessor">#endif</span>
</pre>
<p>
These arbitrary values can be redefined by the user before including the header, as appropriate for their needs.  The specified number of forwarding create(...) functions will be automatically generated as required.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.customization"></a><a class="link" href="#singularity.customization" title="Customization">Customization</a>
</h2></div></div></div>
</div>

<div class="section">
<div class="titlepage"><div><div><h5 class="title" style="clear: both">
<a name="singularity.threadingpolicy"></a><a class="link" href="#singularity.threadingpolicy" title="Threading Policy">Threading Policy</a>
</h5></div></div></div>
<p>
The supplied thread safe policy of multi_threaded is defined as follows:
</p>

<pre class="programlisting">
<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> multi_threaded
{
<span class="keyword">public</span>:
    <span class="keyword">inline</span> multi_threaded()
    {
        lockable.lock();
    }
    <span class="keyword">inline</span> ~multi_threaded()
    {
        lockable.unlock();
    }
<span class="keyword">private</span>:
    <span class="keyword">static</span> ::boost::mutex lockable;
};
</pre>
<p>
Instantiation of this object creates an RAII style lock protecting access to the code in scope.  Developers on small microcontrollers which do not support exceptions, will be unable to use this policy object, as the boost::mutex requires exceptions to be enabled.  If for this, or any other reason, the developer is unable to use the supplied multi_threaded policy, an alternate policy can be implemented and supplied to singularity.  The new policy need only acquire a mutex on construction, and release it upon destruction.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.references"></a><a class="link" href="#singularity.references" title="References">References</a>
</h2></div></div></div>

<ol> 
<li><a class="link" href="http://blogs.msdn.com/b/scottdensmore/archive/2004/05/25/140827.aspx">Why Singletons are Evil</a>,
		Scott Densmore, 2004
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm" target="_blank">The Forwarding Problem</a>,
        Peter Dimov, Howard E. Hinnant, Dave Abrahams, 2002</li> 
<li><a href="http://www.aristeia.com/Papers/DDJ_Jul_Aug_2004_revised.pdf" target="_blank">C++ and the Perils of Double-Checked Locking</a>,
        Scott Meyers and Andrei Alexandrescu, 2004</li>
<li><a href="http://software.intel.com/en-us/blogs/2007/11/30/volatile-almost-useless-for-multi-threaded-programming/" target="_blank">Volatile: Almost Useless for Multi-Threaded Programming</a>,
         Arch Robison, 2007</li>
<li><a href="http://en.wikipedia.org/wiki/Design_Patterns" target="_blank">Design Patterns</a>,
        Gamma et al. - Addison Wesley Publishing, 1995</li> 
<li><a href="http://en.wikipedia.org/wiki/Modern_C%2B%2B_Design" target="_blank">Modern C++ Design</a>,
        Andrei Alexandrescu, 2001</li> 
<li><a href="http://www.boost.org/doc/libs/1_46_1/libs/bind/bind.html" target="_blank">Boost.Bind</a>,
        Peter Dimov, 2001-2005</li> 
</ol>

</div>

</body>
