
<html><head><meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">

<title>Boost.Singularity (Proposed)</title>
<link rel="stylesheet" href="./boostbook.css" type="text/css">
</head>

<body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">

<div class="titlepage"><div>

<div><h2 class="title">
<a name="singularity"></a>Boost.Singularity (Proposed)
</h2></div>

<div><div class="author"><h3 class="author">
<span class="firstname">Ben</span> <span class="surname">Robinson</span>, <span class="degree">Ph.D.</span>
</h3></div></div>

<div><p class="copyright">Copyright © 2011 Ben Robinson, Ph.D.</p></div>

<div><div class="legalnotice">
<a name="id1268168"></a><p>
        Distributed under the Boost Software License, Version 1.0. (See accompanying
        file LICENSE_1_0.txt or copy at <a href="http://www.boost.org/LICENSE_1_0.txt" target="_top">http://www.boost.org/LICENSE_1_0.txt</a>)
      </p>
</div></div>
</div></div>
<div class="toc">
<p><b>Table of Contents</b></p>
<dl>
<dt><span class="section"><a href="#singularity.introduction">Introduction</a></span></dt>
<dt><span class="section"><a href="#singularity.motivation">Motivation</a></span></dt>
<dt><span class="section"><a href="#singularity.tutorial">Tutorial</a></span></dt>
<dd><dl>
<dt><span class="section"><a href="#singularity.factory">Usage as a Factory</a></span></dt>
<dt><span class="section"><a href="#singularity.baseclass">Usage as a Base Class</a></span></dt>
<dt><span class="section"><a href="#singularity.globalaccess">Enabling Global Access</a></span></dt>
<dt><span class="section"><a href="#singularity.threadsafety">Enabling Thread Safety</a></span></dt>
</dl></dd>
<dt><span class="section"><a href="#singularity.limitations">Limitations</a></span></dt>
<dt><span class="section"><a href="#singularity.customization">Customization</a></span></dt>
<dd><dl>
<dt><span class="section"><a href="#singularity.disableexceptions">Disabling Exceptions</a></span></dt>
<dt><span class="section"><a href="#singularity.threadingpolicy">Threading Policy</a></span></dt>
</dl></dd>
<dt><span class="section"><a href="#singularity.references">References</a></span></dt>
</dl>
</div>

<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.introduction"></a><a class="link" href="#singularity.introduction" title="Introduction">Introduction</a>
</h2></div></div></div>

<p>
The Singularity Design Pattern allows you to restrict any class to a single instance.  Singularity gives you direct control over the lifetime of the object, and does not require you to grant global access to the object, nor limit you to a single constructor for that object.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.motivation"></a><a class="link" href="#singularity.motivation" title="Motivation">Motivation</a>
</h2></div></div></div>

<p>
The ability to restrict a class to a single instance is an important technique.  While the commonly used Singleton Design Pattern achieves the desired goal, it introduces three undesirable limitations, namely:
</p>

<ol>
<li>Lifetime: Singleton introduces lifetime management complexities.  The undefined destruction order of multiple singletons is just one example.</li>
<li>Scope: Singletons are always globally accessible.  Accessibility should be orthogonal to restrictions on the number of instances.</li>
<li>Initialization: Singletons typically restricts the class to the default constructor.  This makes Singleton difficult for classes which require non-default constructors.</li>
</ol>

<p>
Like Singleton, Singularity restricts a class to a single instance.  However Singularity does not suffer from lifetime, scoping and initialization problems.  The following are the advantages of Singularity over Singleton:
</p>

<ol>
<li>The lifetime of the single object is bounded by calls to create() and destroy().  This lifetime is managed similiarly to objects bounded by calls to new() and delete().</li>
<li>Singularity does not force global access to the instance.  If global access is required, then a globally accessible get_global() function can be enabled upon creation of the instance.</li>
<li>Singularities of objects can be created using any available constructor for that object.</li>
</ol>

</div>

<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.tutorial"></a><a class="link" href="#singularity.tutorial" title="Tutorial">Tutorial</a>
</h2></div></div></div>

<p>
To use Singularity, either as a factory or a base class, the class which is to be singular must make all constructors private, and friend the singularity class.  A macro is provided to simplify the friend statement:
</p>
<pre class="programlisting">
<span class="preprocessor">#define</span> FRIEND_CLASS_SINGULARITY \
    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> M&gt; <span class="keyword">friend</span> <span class="keyword">class</span> singularity
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h3 class="title" style="clear: both">
<a name="singularity.factory"></a><a class="link" href="#singularity.factory" title="Usage as a Factory">Usage as a Factory</a>
</h3></div></div></div>

<p>
Usage as a factory is shown as follows:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="comment">// This is the class which will be singularized.</span>
<span class="comment">// Notice the private constructors and friend statement.</span>
<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & firstHorizon = singularity&lt;Horizon&gt;::create();
    <span class="comment">// Use the firstHorizon here...</span>
    singularity&lt;Horizon&gt;::destroy();
	
    <span class="comment">// Create using a non-default constructor.</span>
    Horizon & secondHorizon = singularity&lt;Horizon&gt;::create(7);
    <span class="comment">// Use the secondHorizon here...</span>
    singularity&lt;Horizon&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h3 class="title" style="clear: both">
<a name="singularity.baseclass"></a><a class="link" href="#singularity.baseclass" title="Usage as a Base Class">Usage as a Base Class</a>
</h3></div></div></div>

<p>
Usage as a base class is shown as follows:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="comment">// This is the class which will be singularized.</span>
<span class="comment">// Notice the private constructors and friend statement.</span>
<span class="comment">// Also notice the curiously recurring template pattern.</span>
<span class="keyword">class</span> Horizon : <span class="keyword">public</span> singularity&lt;Horizon&gt;
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & firstHorizon = Horizon::create();
    <span class="comment">// Use the firstHorizon here...</span>
    Horizon::destroy();
	
    <span class="comment">// Create using a non-default constructor.</span>
    Horizon & secondHorizon = Horizon::create(7);
    <span class="comment">// Use the secondHorizon here...</span>
    Horizon::destroy();

    <span class="keyword">return</span> 0;
}
</pre></div>


<div class="section">
<div class="titlepage"><div><div><h3 class="title" style="clear: both">
<a name="singularity.globalaccess"></a><a class="link" href="#singularity.globalaccess" title="Enabling Global Access">Enabling Global Access</a>
</h3></div></div></div>

<p>
To enable global access to the instance through the get_global() member function, use create_global() instead of create() when instantiating the object.  An example is shown:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;

<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & horizon = singularity&lt;Horizon&gt;::create_global();
    {
        <span class="comment">// Someplace far away in the code.</span>
        Horizon & sameHorizon = singularity&lt;Horizon&gt;::get_global();
        <span class="comment">// Use the sameHorizon here...</span>
    }
    singularity&lt;Horizon&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h3 class="title" style="clear: both">
<a name="singularity.threadsafety"></a><a class="link" href="#singularity.threadsafety" title="Enabling Thread Safety">Enabling Thread Safety</a>
</h3></div></div></div>

<p>
To enable thread safety, supply a second template argument to singlarity as "multi_threaded".  An example is shown below:
</p>
<pre class="programlisting">
<span class="preprocessor">#include</span> &lt;singularity.hpp&gt;

<span class="keyword">using</span> ::boost::singularity;
<span class="keyword">using</span> ::boost::multi_threaded;

<span class="keyword">class</span> Horizon
{
<span class="keyword">private</span>:
    Horizon() {}
    Horizon(int arg0) {}
    ...
    FRIEND_CLASS_SINGULARITY;
};

int main()
{
    <span class="comment">// Create using the default constructor.</span>
    Horizon & horizon = singularity&lt;Horizon, multi_threaded&gt;::create_global();
    {
        <span class="comment">// Someplace far away in the code.</span>
        Horizon & sameHorizon = singularity&lt;Horizon, multi_threaded&gt;::get_global();
        <span class="comment">// Use the sameHorizon here...</span>
    }
    singularity&lt;Horizon, multi_threaded&gt;::destroy();

    <span class="keyword">return</span> 0;
}
</pre>
<p>
To use a thread safe singularity as a base class, inherit from singularity as shown below:
</p>
<pre class="programlisting">
<span class="keyword">class</span> Horizon : <span class="keyword">public</span> singularity&lt;Horizon, multi_threaded&gt;
</pre>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.limitations"></a><a class="link" href="#singularity.limitations" title="Limitations">Limitations</a>
</h2></div></div></div>

<p>
As a generic wrapper class, singularity needs to perfectly forward the arguments passed from the create() function, into the singularized class.  Unfortunately with C++03, this is not possible for an arbitrary number of arguments, without an O(2^n) implementation.  This is known as the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm">forwarding problem</a>.
</p>

<p>
Just like to Boost.Bind, most create() functions must receive their arguments as non-const references.  However, for functions requiring up to 3 arguments, all arguments will be perfectly forwarded.  The number of required create() functions is O(2^n), 2*(2^(n+1)-1) to be exact, so the default upper limit of 3 arguments requires generating 30 functions.  Constructors which take additional arguments receive them as non-const references up to 10 arguments by default.
</p>
<pre class="programlisting">
<span class="preprocessor">#ifndef</span> BOOST_SINGULARITY_PERFECT_FORWARD_ARG_SIZE
<span class="preprocessor">#define</span> BOOST_SINGULARITY_PERFECT_FORWARD_ARG_SIZE 3
<span class="preprocessor">#endif</span>

<span class="preprocessor">#ifndef</span> BOOST_SINGULARITY_NONCONST_REFERENCE_ARG_SIZE
<span class="preprocessor">#define</span> BOOST_SINGULARITY_NONCONST_REFERENCE_ARG_SIZE 10
<span class="preprocessor">#endif</span>
</pre>
<p>
These arbitrary values can be redefined by the user before including the header, as appropriate for their needs.  The specified number of forwarding create(...) functions will be automatically generated as required.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.customization"></a><a class="link" href="#singularity.customization" title="Customization">Customization</a>
</h2></div></div></div>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.disableexceptions"></a><a class="link" href="#singularity.disableexceptions" title="Disabling Exceptions">Disabling Exceptions</a>
</h2></div></div></div>
<p>
Exceptions may be disabled by defining BOOST_NO_EXCEPTIONS prior to compilation.  All throws will be replaced with BOOST_ASSERT().  This may be useful when tightly constrained for space, such as embedded projects on small microcontrollers.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.threadingpolicy"></a><a class="link" href="#singularity.threadingpolicy" title="Threading Policy">Threading Policy</a>
</h2></div></div></div>
<p>
The supplied thread safe policy of multi_threaded is defined as follows:
</p>

<pre class="programlisting">
<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt; <span class="keyword">class</span> multi_threaded
{
<span class="keyword">public</span>:
    <span class="keyword">inline</span> multi_threaded()
    {
        lockable.lock();
    }
    <span class="keyword">inline</span> ~multi_threaded()
    {
        lockable.unlock();
    }
<span class="keyword">private</span>:
    <span class="keyword">static</span> ::boost::mutex lockable;
};
</pre>
<p>
Instantiation of this object creates an RAII style lock protecting access to the code in scope.  Developers on small microcontrollers which do not support exceptions, will be unable to use this policy object, as the boost::mutex requires exceptions to be enabled.  If for this, or any other reason, the developer is unable to use the supplied multi_threaded policy, an alternate policy can be implemented and supplied to singularity.  The new policy need only acquire a mutex on construction, and release it upon destruction.
</p>
</div>


<div class="section">
<div class="titlepage"><div><div><h2 class="title" style="clear: both">
<a name="singularity.references"></a><a class="link" href="#singularity.references" title="References">References</a>
</h2></div></div></div>

<ol> 
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm" target="_top">The Forwarding Problem</a>,
        Peter Dimov, Howard E. Hinnant, Dave Abrahams, 2002</li> 
<li><a href="http://en.wikipedia.org/wiki/Design_Patterns" target="_top">Design Patterns</a>,
        Gamma et al. - Addison Wesley Publishing, 1995</li> 
<li><a href="http://en.wikipedia.org/wiki/Modern_C%2B%2B_Design" target="_top">Modern C++ Design</a>,
        Andrei Alexandrescu, 2001</li> 
<li><a href="http://www.boost.org/doc/libs/1_46_1/libs/bind/bind.html" target="_top">Boost.Bind</a>,
        Peter Dimov, 2001-2005</li> 
</ol>

</div>

</body>
